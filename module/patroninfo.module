<?php
// $Id: patroninfo.module 38 2013-05-30 18:33:27Z es287 $
/**
 * @file - shows a library patron's data.
 *
 */
$patroninfo_data;

function _patroninfo_login_page() {
  // if you go to /myacctpage the permissions will not be right until a refresh
  $target = url('/myacct', array('alias' => TRUE, 'absolute' => TRUE));

  if (module_exists('cu_webauth')) {
    $netid = cu_authenticate();
  }
  else if (module_exists('simplesamlphp_auth')) {
    $auth = new SimpleSAML_Auth_Simple('default-sp');
    $auth->requireAuth(array('ReturnTo' => $target));
  }
  drupal_goto($target);
}

define('DEFAULT_API', 'https://voy-api.library.cornell.edu/cgi-bin/ilsapiE.cgi?netid=');
define('OTHER_USER', 'see other users library accounts');
define('CONFIGURE_ILS', 'configure ils api feeds');
define('RDONLY_MSG', "Due to system maintenance, renewal and request cancellation are not available");

/**
 * add user:password to voyager api credentials
 */
function _patroninfo_myacct_credentials($url) {
  global $conf;
  if (!empty($conf['myacct-services-credentials'])) {
    // add user:password for web service
    $cred = $conf['myacct-services-credentials']; // array('usr' => 'password');
    $parts = parse_url($url);
    $parts['pass'] = reset($cred);
    $parts['user'] = key($cred);
    $nurl = _patroninfo_unparse_url($parts);
    return $nurl;
  }
  return $url;
}

function _patroninfo_unparse_url($parsed_url) {
  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';
  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';
  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';
  $pass     = ($user || $pass) ? "$pass@" : '';
  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';
  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
  return "$scheme$user$pass$host$port$path$query$fragment";
}

/**
 * Implements hook_block_info().
 */
function patroninfo_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  $blocks['patroninfo']['info'] = t('PatronInfo');
  $blocks['patroninfo']['cache'] = DRUPAL_NO_CACHE;
  $blocks['patroninfo-renew']['info'] = t('PatronInfo Renew');
  $blocks['patroninfo-renew']['cache'] = DRUPAL_NO_CACHE;
  $blocks['patroninfo-login-visit']['info'] = t('Login or Visit My Account');
  $blocks['patroninfo-login-visit']['cache'] = DRUPAL_NO_CACHE;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function patroninfo_block_view($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings
  $r = '';
  $cdatad = array();
  $wdata = $deny_msg = $acc_trouble_msg = ''; 
  $rdonly = variable_get('patroninfo_rdonly', 'N'); 
  $rblock_msg = ''; 
  $rdonly_default_msg = "Due to system maintenance, renewal and request cancellation are not available";
  $rdonly_msg = ($rdonly == 0) ? "" : $rdonly_default_msg;
  $rdonly  = ($rdonly == 0) ? 'N'  : 'Y';
  // jgr25 eliminate php notices pimessage
  $odata =$fdata = $ndatad = $fdatad = $odatad = $wdatad = $wmsg = $pima = $cdata = $pimessage = ''; 
  switch ($delta) {
    case 'patroninfo-login-visit':
      $blocks['subject'] = t('<h3>Renew your books and check the status of your requests</h3>');
      $blocks['content'] = '';
      if (user_is_logged_in()) {
        $blocks['content'] .= t('<a class="btn btn-cul" href="/myacctpage">Check your account information</a>');        
      }
      else {
        $blocks['content'] .= t('<a class="btn btn-cul" href="/patroninfo/login">Login with your NetID or GuestID Â»</a>');        
        $blocks['content'] .= '<ul>';
        $blocks['content'] .= t('<li>Cornell students, faculty and staff: use <strong>NetID</strong></li>');
        $blocks['content'] .= t('<li>Guest Borrowers (Library Card, Privilege Card and SUNY Card holders): use <strong>GuestID</strong> (contact the <a href="mailto:libpublicservices@cornell.edu">Library Public Services office</a> about obtaining a GuestID)</li>');       
        $blocks['content'] .= '</ul>';
      }
      return $blocks;
      break;
    case 'patroninfo':
      //dpm(drupal_get_library('system'));
      // views_include("tabs"); jgr25 trial remove for Drupal7
      // views_add_css('admin'); jgr25 trial remove for Drupal7
      _patroninfo_add_local();
      // $ts = new views_tabset; jgr25 trial remove for Drupal7
      if (module_exists('cu_webauth')) {
        $netid = cu_authenticate();
        if ($_COOKIE['netid']) { // make sure netid is never stale.
          unset($_COOKIE['netid']);
        }
      }
      else if (module_exists('simplesamlphp_auth')) {
        $auth = new SimpleSAML_Auth_Simple('default-sp');
        $target = url('/myacct', array('alias' => TRUE, 'absolute' => TRUE));
        $auth->requireAuth(array('ReturnTo' => $target));
        $attrs = $auth->getAttributes();
        if (false) {
          // this seems to return vanity email addresses
          $email = $attrs['mail'][0];
          $netid = substr($email, 0, strpos($email, '@'));
        }
        else {
          $netid = $attrs['uid'];
        }
        $full_name = $attrs['displayName'][0];
      }
      else {
        $netid = '';
      }
      $actualnetid = $netid;
      //if ($netid == 'es287'){$netid = 'jk2637';} // bd due. 
      //if ($netid == 'es287'){$netid = 'mls5';} // lots of stuff 
      //if ($netid == 'es287'){$netid = 'dmf22';} // user has blocks.
      //if ($netid == 'es287'){$netid = 'ajs17';}
      //if ($netid == 'es287'){$netid = 'gid-wittep';}
      //if ($netid == 'es287'){$netid = 'ds895';}
      //if ($netid == 'es287'){$netid = 'gid-hollisst@CORNELL.EDU';}
      $netid = str_replace('@CORNELL.EDU', '', $netid);
      //if ($netid == 'es287'){$netid = 'epe3';}
      //if ($netid == 'es287'){$netid = 'aa34';}
      //if ($netid == 'es287'){$netid = 'aa239';}
      //if ($netid == 'es287'){$netid = 'jk252';}
      //if ($netid == 'es287'){$netid = 'epr29';}
      //if ($netid == 'es287'){$netid = 'keb11';} // 920 (approx) items
      //if ($netid == 'es287'){$netid = 'kjh10';}
      //if ($netid == 'es287'){$netid = 'uak4';}
      //if ($netid == 'es287'){$netid = 'jgr25';}
      if (empty($netid)) {
        $target = url('/myacct', array('alias' => TRUE, 'absolute' => TRUE));
        drupal_goto($target);
      }
      $renew_user = '';
      if (user_access(OTHER_USER)) {
        $renewsessionname = $_COOKIE['renewsession'];
        if (is_file("/tmp/" . $renewsessionname . ".txt")) {
          $netid = file_get_contents("/tmp/" . $renewsessionname . ".txt");
          unlink("/tmp/" . $renewsessionname . ".txt");
        }
        if (isset($_POST['other_user'])) {
          $netid = $_POST['other_user'];
        }
        if (isset($_SESSION['renew_user'])) {
          $netid = $_SESSION['renew_user'];
          $renew_user = $_SESSION['renew_user'];
        }
        if (0 && isset($_COOKIE['renewuser'])) {
          $netid = $_COOKIE['renewuser'];
          __erase_cookie_header('renewuser');
        }
      }

      if (isset($netid) && $netid != '') {
        $blocks['subject'] = t('PatronInfo');
        $url = variable_get('patroninfo_target', DEFAULT_API) . $netid;
        // someone might set the api address to null.
        if (strlen($url) < 7) {
          $url = DEFAULT_API . $netid;
        }
        $url = _patroninfo_myacct_credentials($url);
        $stuff = file_get_contents($url);
        // the json decode gets all twisted up if the json is not utf-8,
        // and if it contains tabs.
        // at the moment some of the data is utf-8, and some iso-8859-1. got to fix this.
        //$str = iconv("ISO-8859-1", "UTF-8", $stuff);
        //$str = iconv("IS)-8859-1", "UTF-8//IGNORE", $stuff);
        $str = preg_replace('/[[:^print:]]/', '', $stuff);
        //$str = $stuff;
        $str = strtr($str, "\t", " ");
        $var = json_decode($str);
        $patroninfo_data = $var;
        $cindex = 0;
        $crindex = 0;
        $today = date('Y-m-d');
        $_COOKIE['renewsession'] = session_name();
        __set_cookie_header('renewsession', session_name());
        if (isset($_COOKIE['pimessage'])) {
          $pimessage = $_COOKIE['pimessage'];
          $pims = explode('*', $pimessage);
          print_r($pimessage); 
          foreach ($pims as $item) {
            $itema = explode("|", $item);
            $pima[$itema[0]] = $itema;
          }
        }
        //unset($_COOKIE['pimessage']);
        // __erase_cookie_header('pimessage');
        //setcookie("pimessage", "", 0);
        $api_blocks = '';
        $rdenied = 'N';
        $rbc = $var->patron->bc;
        if ($rbc != '') {
          //$rdenied = __pa_renewal_denied($rbc) ;
          $api_blocks = __pa_renewal_denied_api($var->patron->pid);
          if ($api_blocks != '') {
            $rdenied = 'Y';
          }
        }
        else {
          $rdenied = 'Y';
        }
        $_SESSION['all_json'] = $var;
        // form tree begins.
        // because we render 'manually', some stuff does not show up.
        // YOU BETTER MAKE SURE THIS FORM DOES NOT CACHE.
        if (user_access(OTHER_USER)) {
          $form['other_user'] = array(
            '#id' => 'other_user',
            '#name' => 'other_user',
            '#type' => 'textfield',
            '#size' => 8,
            '#max_length' => 20,
            '#title' => t("Look up user's info"),
          );
        }
        $form['pid'] = array(
          '#id' => 'pid',
          '#name' => 'pid',
          '#type' => 'hidden',
          '#value' => $var->patron->pid,
        );
        $form['bc'] = array(
          '#id' => 'bc',
          '#name' => 'bc',
          '#type' => 'hidden',
          '#value' => $var->patron->bc,
        );
        $form['sn'] = array(
          '#id' => 'sn',
          '#name' => 'sn',
          '#type' => 'hidden',
          '#value' => $var->patron->last,
        );
        $form['inid'] = array(
          '#id' => 'inid',
          '#name' => 'inid',
          '#type' => 'hidden',
          '#value' => $var->patron->inid,
        );
        $form['citeall'] = array(
          '#id' => 'citeall',
          '#name' => 'citeall',
          '#type' => 'hidden',
          '#value' => 'no',
        );
        $form['netid'] = array(
          '#id' => 'netid',
          '#name' => 'netid',
          '#type' => 'hidden',
          '#value' => $netid,
        );
        $form['cbott'] = array(
          '#id' => 'cbotton',
          '#name' => 'cbotton',
          '#type' => 'submit',
          '#button_type' => 'button',
          '#weight' => 90,
          '#value' => t('Send marked items to citation manager'),
        );
        $form['cbotta'] = array(
          '#id' => 'cbottona',
          '#name' => 'cbottona',
          '#type' => 'submit',
          '#button_type' => 'button',
          '#weight' => 91,
          '#value' => t('Send all items to citation manager'),
        );
        $form['xsubmit'] = array(
          '#id' => 'cbottond',
          '#name' => 'cbottond',
          '#type' => 'submit',
          '#button_type' => 'button',
          '#value' => t('Renew all items'),
          '#weight' => 10,
        );
        $form['submit'] = array(
          '#id' => 'cbottonc',
          '#name' => 'cbottonc',
          '#type' => 'submit',
          '#button_type' => 'button',
          '#value' => t('Renew marked items'),
          '#weight' => 9,
        );
        if (user_access(OTHER_USER)) {
          $form['cbottb'] = array(
            '#id' => 'cbottonb',
            '#name' => 'cbottonb',
            '#type' => 'button',
            '#button_type' => 'button',
            '#value' => t('Lookup info for specified user.'),
          );
          $form['cbottd'] = array(
            '#id' => 'cbottond',
            '#name' => 'cbottond',
            '#type' => 'button',
            '#button_type' => 'button',
            '#value' => t('Reset current user to me.'),
          );
        }
        $disabled = 1;
        if ($var->patron->status != 'Active' || $rdenied == 'Y' || $rdonly == 'Y')  {
          $disabled = 1;
        }
        else {
          $disabled = 0;
        }
        if ($rdenied == 'Y') {
          $rblock_msg = "You are blocked from renewing.$api_blocks";
        }
        $form['#type'] = 'form';
        $form['#id'] = 'renewform';
        $form['#name'] = 'renewform';
        $form['#method'] = 'post';
        $form['#action'] = url(drupal_get_path('module', 'patroninfo').'/renew.php');
        $form['#attributes'] = array('enctype' => 'multipart/form-data',);
        //$hidden .= drupal_render($form);
        foreach ($var->items as $item) {
          $modate = $note = '';
          if (($item->status == 'chrged') || ($item->status == ' RECEIVED') || ($item->status == 'Received')) {
            if ($item->od == $item->rd) {
              $due = $item->od;
            }
            else {
              $due = $item->rd;
            }
            $modate = date("M", mktime(0, 0, 0, substr($due, 5, 2), 1));
            $visdue = $modate . substr($due, 7, 3) . '-' . substr($due, 0, 4);
            if (isset($item->re) && strlen($item->re) > 0) {
              $note = "Recalled. Please note due date.";
              $due = $item->re;
            }
            if (!empty($item->vstatus)) {
              $note .= ' ' . $item->vstatus;
            }
            $visdue = __pa_fmt_date($visdue);
            if ($due == $today) {
              // the space makes the string sort to the top -- so leave it there.
              // the span is for anyone who wants to style things due today.
              if (!empty($item->odt)) {
                $time = ' by ' . $item->odt;
              }
              $visdue = ' <span class="patroninfo-today">* TODAY ' . $visdue . $time . '</span>.';
            }
            // create the form element
            $bd_note = "";
            $msg = '';
            if ($item->system == 'illiad') {
              if (isset($pima["$item->ii"])) {
                $msg = $pima["$item->ii"][2];
              }
            }
            else {
              if (isset($pima["$item->iid"])) {
                $msg = $pima["$item->iid"][1];
              }
            }
            if (!($item->system == 'borrowdirect') && !($disabled)) {
              if (($item->system == 'illiad' && $item->ra == 'Yes') || ($item->system != 'illiad' && $item->lo != '') || ($item->system != 'illiad' && $item->lo == '' && $item->renewal_count < 1)) {
                $k = 'item_' . $cindex . '_renew';
                $form[$k] = array(
                  '#id' => $k,
                  '#name' => $k,
                  '#type' => 'checkbox',
                  '#return_value' => $item->system . ':' . ($item->system == 'illiad' ? $item->ii : $item->iid),
                );
              } else {
                if ($item->system != 'illiad' && $item->lo == '' && $item->renewal_count > 0 ) {
                  $k = 'bd_' . $cindex . '_at_max';
                  $form[$k] = array(
                  '#type' => 'markup',
                  '#markup' =>  '<span class="patroninfo-bd-cantrenew"><i>Note: This Borrow Direct book has been renewed. It is not eligible for further renewals.</i> </span>'
                );
                  //$bd_note = '<span class="patroninfo-bd-cantrenew"><i>Note: This Borrowdirect item is not eligible for renewal.</i> </span>';
                }
              }
              $r = drupal_render($form[$k]);
            }
            else {
              if (!$disabled) {
                if ($item->system != 'illiad' && $item->lo == '' && $item->renewal_count > 0 ) {
                  $bd_note = '<span class="patroninfo-bd-cantrenew"><i>Note: This Borrowdirect item is not eligible for renewal.</i></span>';
                }
              }
              else {
                $bd_note = '<span class="patroninfo-disabled"></span>';
              }
            }
            $r .= $msg; //. __build_cite_link($item);
            //$cdatad[]= array($due,$r.$item->tl . t('Location:').$item->lo.". $note",'');
            $cdatad[] = array($r , $visdue, __pa_fmt_tl($item)  . t('Location:') . $item->lo . ". $note $bd_note" . __build_cite_link($item) . __build_coins($item), '');
            $scdatad[] = array(
              'index' => $cindex++,
              'due' => $due,
            );
            $cdata .= '<li class=patroninfo-item>' . $item->tl . ' ' . $due . t(' borrowed from ') . $item->lo . '</li>';
          }
          if (($item->status == 'Unfilled') || ($item->status == 'Cancelled') || (isset($item->system)) && ($item->system == 'illiad') && ($item->TransactionStatus == 'Cancelled by Customer')) {
            if ($item->od == $item->rd) {
              $due = $item->od;
            }
            else {
              $due = $item->rd;
            }
            if (strlen($item->re) > 0) {
              $note = "Recalled. Please note due date.";
              $due = $item->re;
            }
            if (!empty($item->vstatus)) {
              $note .= ' ' . $item->vstatus;
            }
            if (!empty($item->TransactionStatus)) {
              $note .= ' ' . $item->TransactionStatus;
            }
            $ndatad[] = array($due, $item->tl . ' ' . t('Location:') . $item->lo . " $note", '');
            $ncdatad[] = array(
              index => $nindex++,
              due => $due,
            );
            $ndata .= '<li class=patroninfo-item>' . $item->tl . ' ' . $due . t(' borrowed from ') . $item->lo . '</li>';
          }
          if (($item->status == ' SHIPPED') || ($item->status == 'Shipped') || ($item->status == 'Pending') || (($item->status == 'pahr') && !(($item->system == 'illiad') && ($item->TransactionStatus == 'Cancelled by Customer')))) {
            $shipped = isset($item->ed) ? $item->ed : '' ;
            $k = '';
            $r = '';
            if ($item->system != 'borrowdirect') {
              // create the form element
              $k = 'item_' . $crindex++ . '_cancel';
              $form[$k] = array(
                '#id' => $k,
                '#name' => $k,
                '#type' => 'checkbox',
                '#return_value' => $item->system . ':' . ($item->system == 'illiad' ? $item->ii : $item->iid . ":transactionid:" . $item->tid . ":" . $item->ttype),
              );
              $r = drupal_render($form[$k]);
            }
            if ($item->system == 'illiad') {
              $omsg = "<a href='" . $item->url . "'>(view original request)</a>";
            }
            else {
              $omsg = '';
            }
            $loc = '';
            if   (isset($item->loc) && $item->lo != '') {
              $loc = $item->lo;
            }
            $odatad[] = array($r, $shipped, __pa_fmt_tl($item) . $omsg, $loc);
            $odata .= '<li class=patroninfo-item>' . $item->tl . t('is on its way to you for pickup at : ') . $loc . '</li>';
          }
          if ($item->status == 'waiting') {
            if (isset($item->url) && $item->url != '') {
              $at = _link(t('Get It!'), 'patroninfo-link', $item->url);
            }
            else {
              $at = $item->lo;
            }
            $before = isset($item->ed) ? $item->ed : '' ;
            if (isset($item->system) && $item->system == 'illiad') {
              $before = $item->od;
              //$wmsg = 'see at ' . $item->url . ' ' ;
            }
            else {
              $wmsg = '';
            }
            $modate = date("M", mktime(0, 0, 0, substr($before, 5, 2), 1));
            $visbefore = $modate . substr($before, 7, 3) . '-' . substr($before, 0, 4);
            $wdatad[] = array($visbefore, __pa_fmt_tl($item)  . $wmsg, $at);
            $wdata .= '<li class=patroninfo-item>' . $item->tl . t('is waiting for you : ') . $item->lo . '</li>';
          }
          if ($item->status == 'finef') {
            $finedate = $item->ed;
            $modate = date("M", mktime(0, 0, 0, substr($finedate, 5, 2), 1));
            $visfinedate = $modate . substr($finedate, 7, 3) . '-' . substr($finedate, 0, 4);
            $am = substr($item->am, 0, strlen($item->am)-2) . '.' . substr($item->am, -2);
            $fdatad[] = array($visfinedate, $item->tl, $am);
            $od = isset($item->od) ? $item->od  : '';
            $fdata .= '<li class=patroninfo-item>' . $item->tl . t('was due:') . $od . t(' at ') . $item->lo . t('Amount:') . $item->am . '</li>';
          }
        }
        if ($cindex) { // only sort if there is something there.
          foreach ($scdatad as $key => $row) {
            $dates[$key] = $row['due'];
          }
          // Sort the data with dates ascending
          // Add $scdatad as the last parameter, to sort by the common key
          array_multisort($dates, SORT_ASC, $scdatad);
          foreach ($scdatad as $key => $row) {
            $cdatadx[$row['index']] = $cdatad[$row['index']];
          }
          $cdatad = $cdatadx;
        }
        //$you = $var->patron->last.','.$var->patron->given;
        //$you=($var->patron->last)?($var->patron->given.' '.$var->patron->last):$netid;
        // if ($var->patron->status != 'Active' ) { $you .= '.&nbsp; <i>Note</i>: &nbsp; your account has expired; please <a href="mailto:libpublicservices@cornell.edu">contact the library</a> for assistance.' ; $disabled = 1;}
        $conmsg = "Please <a href=\"mailto:libpublicservices@cornell.edu\">contact the library</a> for assistance.";
        $voyblocks = (($rdenied == 'Y')  || ($rdonly == 'Y'))? "<br/>$rblock_msg  $deny_msg $rdonly_msg " : "";
        $you = (($var->patron->last) ? ($var->patron->given . ' ' . $var->patron->last) : $netid) . $voyblocks;
        if ($disabled) {
          $you .= "<i>Note</i>: &nbsp; $acc_trouble_msg $conmsg";
        }
        $ecount = count($pima) > 1 ? "There were " . (count($pima) -1 ) . " renewal errors." : "";
        if ($ecount) {
          $you .= "<i>Note</i>: &nbsp; $ecount";
        }
        //$wmsg = "Please note -- the Voyager catalog will be in read-only mode during software upgrade from the morning of Monday Dec 24 2012 until the morning of Wed. Jan 2 2013.  Users of the catalog will not be able to renew items, do holds, recalls, and delivery requests.  Returned items will not appear as returned until full production returns.";

        // $blocks['content'] = "<h2>$wmsg</h2> <h3 id='patroninfoid' class='patroninfo-title'>" . t('Account information for') . " $you // $ecount </h3>";
        $blocks['content'] = "<h2 id='patroninfoid' class='patroninfo-title'>" . t('Account information for') . " $you</h2>";
        $p1 = array($cdatad, array(t('Renew'), t('Due Date'), t('Title'), t(' ')), t('Checked Out '));
        $p2 = array($wdatad, array(t('Pickup Before'), t('Title'), t('At')), t('Available Requests '));
        $p3 = array($odatad, array(t('Cancel'), t('Request Expires'), t('Title'), t('At')), t('Pending Requests '));
        $p4 = array($fdatad, array(t('Incurred On'), t('Title'), t('Amt')), t('Fines and Fees '));
        $p5 = array($ndatad, array(t('Date'), t('Item and message'), t('At')), t('Notices '));
        $form['panels'] = array(
          '#type' => 'markup',
          '#markup' => _patroninfo_tabs(array($p1, $p2, $p3, $p4, $p5)),
        );
        $form['item_cindex'] = array(
          '#name' => 'item_cindex',
          '#type' => 'hidden',
          '#value' => count($cdatad),
        );
        $form['item_crindex'] = array(
          '#name' => 'item_crindex',
          '#type' => 'hidden',
          '#value' => count($odatad),
        );
        // no such call in drupal 7 $blocks['content'] .= drupal_render_form('renewform', $form);
        $blocks['content']  .= drupal_render($form); 
        //$blocks['content'] .= __build_refbox() ;
        $fs = '';
        //if (1) {
        if (variable_get('patroninfo_debug', 0)) {
          $action_url = url(drupal_get_path('module', 'patroninfo').'/renew.php');
          $blocks['content'] .= "ACTION: $action_url URL:$url<br/>renew user ($renew_user). FORM STATE= $fs<br/>$stuff<br/>pima:" . print_r($pima, TRUE) . "<br/>pimessage:$pimessage<br/>". print_r($_SESSION, TRUE) . print_r($_REQUEST, TRUE) . print_r("<br/>POST DATA ", TRUE) . print_r($_POST, TRUE) . print_r("<br/>Session id is " . session_id(), TRUE) . print_r("<br/>Session name is " . session_name(), TRUE);
        }
        return $blocks;
      }
      else { // we should never reach this point.
        $dest = 'http://dss-es287linux.library.cornell.edu/apache2-default/test/netid.php';
        setcookie("callback", "/apache2-default/webvision/xaboutme");
        drupal_goto($dest);
      }
    case 'patroninfo-renew':
      $blocks['content'] .= drupal_get_form('patroninfo_renewform');
      return $blocks;
  } // delta;
}

/**
 * Implements hook_block().
 */
function patroninfo_block_OLD($op = 'list', $delta = 0, $edit = array()) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  global $user;
  global $patroninfo_data; // op
}

/**
 * Implements hook_menu().
 */
function patroninfo_menu() {
  $items = array();
  $items['admin/config/content/patroninfo'] = array(
    'title' => t('ILS api client'),
    'description' => t('Configure settings for ils api.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patroninfo_admin_settings'),
    'access arguments' => array(CONFIGURE_ILS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['patroninfo/list'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patroninfo_list'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['patroninfo/login'] = array(
    'title' => 'Patroninfo login',
    'page callback' => '_patroninfo_login_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * administration settings for patroningo
 * @param  array $form       form array
 * @param  array $form_state state of form
 * @return array             modified form
 */
function patroninfo_admin_settings($form, &$form_state) {
  $form['patroninfo_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Patron Info template'),
    '#default_value' => variable_get('patroninfo_target', 'http://libdev.library.cornell.edu/~es287/classes/ilsapi.cgi?netid='),
    '#description' => t('URL of the target cgi that returns ils info. The user netid is added at the end. netid is the parm.'),
    '#maxlength' => 256,
  );
  $form['patroninfo_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show debug info'),
    '#default_value' => variable_get('patroninfo_debug', 0),
    '#description' => t('Show debug info'),
  );
  $form['patroninfo_rdonly'] = array(
    '#type' => 'checkbox',
    '#title' => t('System is in readonly'),
    '#default_value' => variable_get('patroninfo_rdonly', 'N'),
    '#description' => t('Put system into readonly'),
  );
  $form['#submit'] = array('patroninfo_admin_settings_submit');

  return system_settings_form($form);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
/**
 * [patroninfo_permission description]
 * @return [type] [description]
 */
function patroninfo_permission() {
  return array(
    CONFIGURE_ILS => array(
      'title' => t(CONFIGURE_ILS),
      'description' => t('TODO Add a description for CONFIGURE_ILS'),
    ),
    OTHER_USER => array(
      'title' => t(OTHER_USER),
      'description' => t('Access Patroninfo for users other than yourself'),
    ),
    'login to patroninfo' => array(
      'title' => t('Access Patroninfo Login Page'),
    ),
  );
}

/**
 * Validation function;
 *
 */
function patroninfo_admin_settings_validate(&$form, $form_state) {
}

/**
 * Submits the admin settings form and saves all the variables.
 */
function patroninfo_admin_settings_submit($form, &$form_state) {
  variable_set('patroninfo_target', $form_state['values']['patroninfo_template']);
  variable_set('patroninfo_debug', $form_state['values']['patroninfo_debug']);
  variable_set('patroninfo_rdonly', $form_state['values']['patroninfo_rdonly']);
}

/**
 * returns a formatted link
 */
function _link($label, $class, $link) {
  $uclass = ' class="' . (isset($class) ? $class : 'link') . '" ';
  return "<a$uclass href='$link'>$label</a>";
}

/**
 * returns a formatted link
 */
/*function _format_table($legend, $datad, $col_one, $col_two, $col_three, $clapsed = TRUE) {
  $fstitle = $legend . ' (' . sizeof($datad) . ')';
  $bc = theme_table(array(
    $col_one,
    $col_two,
    $col_three,
  ), $datad, null, $legend);
  $fieldset = array(
    '#title' => $fstitle,
    '#collapsible' => TRUE,
    '#collapsed' => $clapsed,
    '#value' => $bc,
  );
  //$fieldset = array('#title' => $fstitle, '#collapsible' => FALSE,'#collapsed' => $clapsed, '#value' => $bc);
  return theme('fieldset', $fieldset);
}
*//**
 * returns tabs formatted like primary tabs.
 * ptabs is an array of arrays -- each element is an array of data, and an array of labels.
 * first is array of data, second is array of items, third is just label. eg
 *    array($wdatad,array(t('Pickup before'),t('Description'), t('At')),t('Available'));
 */
function _patroninfo_tabs($ptabs) {
  $ul = '<div id="pi-tabs" class="xtabs"><ul class="nav nav-tabs" role="tablist">' . "\n";
  $tabn = 0;
  $dv = '';

  //dpm($ptabs);
  foreach ($ptabs as $item) {
  $len = '0';
  $emsg = $item[2];
  if (stristr($emsg,'Checked') !== FALSE) 
    $emsg = "Checked Out Items";
  $evariables = array(
      'header' => array(t("No " . $emsg)),
      'rows' =>array(),
      'caption' => 'No items',
      'no_striping' => TRUE,
      'empty' => '',
      'colgroups' => array(),
      'sticky' => TRUE,
      'attributes' => array(),
      );
  $variables = array(
      'header' => $item[1],
      'rows' =>is_array($item[0])? $item[0]:array(),
      'caption' => $item[2],
      'no_striping' => FALSE,
      'empty' => '',
      'colgroups' => array(),
      'sticky' => TRUE,
      'attributes' => array(),
      );
    if (is_array($item[0])) {
      $len = sizeof($item[0]);
    }
    if ($len != '0')
      $bc = theme_table($variables); // jgr25
    else
      $bc = theme_table($evariables);
    //$bc = theme_table($item[1], $item[0], null, $item[2]);
    $ul .= "<li role=\"presentation\"><a href=\"#frag-$tabn\" role=\"tab\" data-toggle=\"tab\"><span>" . $item[2] . '(' . $len . ')</span></a></li>' . "\n";
    $tabcontent = "<div class=\"tab-content\">";
    $dv .= "<div id=\"frag-$tabn\" role=\"tabpanel\" class=\"tab-pane\">" . $bc . '</div>' . "\n";
    $tabn++;
  }
  $ul .= '</ul>';
  $output = $ul . $tabcontent . $dv . '</div></div>' . "\n";
  return $output;
}

/**
 * add js, both standard files, and inline boilerplate for patroninfo module.
 */
function _patroninfo_add_local() {
  drupal_add_css(drupal_get_path('module', 'patroninfo') . '/css/patroninfo-flora.pi.css');
  //drupal_add_js(drupal_get_path('module', 'patroninfo') . '/js/patroninfo-ui.core.js');
  drupal_add_js(drupal_get_path('module', 'patroninfo') . '/js/patroninfo-ui.tabs.js');
  //drupal_add_library('system', 'ui');
  //drupal_add_library('system', 'ui.tabs');
  drupal_add_js(drupal_get_path('module', 'patroninfo') . '/js/patroninfo-jquery.js');
  drupal_add_js(drupal_get_path('module', 'patroninfo') . '/js/patroninfo-divheader.js');
  $boiler = '
  jQuery(function( $ ){
    $(document).ready(function(){
      $("#pi-tabs > ul").tabs();
	    $("#cbottonc").val("Renew marked items");
		  $(".nav-tabs > li > a ").bind("click",function(event) {
        var t = event.target.textContent;
          if (!t) t = event.target.innerText;
          if (t.match("Pending")){
      			$("#cbottona").hide();
      			$("#cbotton").show();
      			$("#cbottond").hide();
      			$("#cbottonc").val("Cancel marked items");
      			$("#cbottonc").text("Cancel marked items");
      			$("#cbottonc").show();
          }
          if (t.match("Available")){
      			$("#cbottond").hide();
      			$("#cbottona").hide();
      			$("#cbotton").hide();
      			$("#cbottonc").text("Cancel marked items");
      			$("#cbottonc").val("Cancel marked items");
      			$("#cbottonc").show();
          }
          if (t.match("Fines") || t.match("Notices")){
      			$("#cbottonc").hide();
      			$("#cbottond").hide();
      			$("#cbotton").hide();
      			$("#cbottona").hide();
          }
          if (t.match("Checked") ){
      			$("#cbottonc").show();
      			$("#cbottond").show();
      			$("#cbotton").show();
      			$("#cbottona").show();
      			$("#cbottonc").val("Renew marked items");
      			$("#cbottonc").text("Renew marked Items");
          }
        }
      );
    });
      $("#frag-0").addClass("active");
    });
  ';

  drupal_add_js($boiler, array('type' => 'inline', 'group' => JS_DEFAULT));
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
/**
 * [patroninfo_list_submit description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function patroninfo_list_submit($form, &$form_state) {

  $gnet = $form_state['values']['patroninfo_list'];
  $_SESSION['gnet'] = $gnet;
  $renewables = $form_state['values']['item_cindex'];
  for ($i = 0; $i < $renewables; $i++) {
    $requested .= ' ' . $form_state['values']['item_' . $i . '_renew'];
  }
  drupal_set_message(t("You submitted successfully for user %gnet  (of %items) ,renew requests for %req", array('%items' => $renewables, '%req' => $requested, '%gnet' => $gnet,)));
  $form_state['redirect'] = '/patroninfo/list';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
/**
 * [patroninfo_process description]
 * @return [type] [description]
 */
function patroninfo_process() {
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
/**
 * [patroninfo_renewform description]
 * @param  [type] $form [description]
 * @return [type]       [description]
 */
function patroninfo_renewform($form) {
  $form = patroninfo_list();
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
/**
 * [patroninfo_list description]
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */

function __erase_cookie_header($cookiename) {
  $backtime = mktime() -36000;
  $backdate = date("l, d-M-y H:i:s", ($backtime));
  $tmpstring = $_COOKIE[$cookiename];
  //$tmpstring = urlencode($tmpstring);
  drupal_add_http_header("Set-Cookie",
  "$cookiename=$tmpstring; expires=$backdate GMT; path=/;domain=" . $_SERVER['SERVER_NAME']);
}
function __set_cookie_header($cookiename, $value) {
  $backtime = mktime() + 36000;
  $backdate = date("l, d-M-y H:i:s", ($backtime));
  $tmpstring = urlencode($value);
  drupal_add_http_header("Set-Cookie",
  "$cookiename=$tmpstring; expires=$backdate GMT; path=/;domain=" . $_SERVER['SERVER_NAME']);
}

function __build_cite_link(&$item) {
  $base = '';
  //#return $base;
  if ($item->system != 'illiad') {
    $genre = 'Book';
  }
  else {
    $genre = $item->ou_genre;
  }
  $callnos = "";
  if (isset($item->callno)) {
    $callnos = '&ou_callno=' . urlencode($item->callno)  ;
  }
  $pubs = "";
  if (isset($item->ou_pp)) {
    $pubs = '&ou_pb=' . urlencode($item->ou_pb) . '&ou_pp=' . urlencode($item->ou_pp) . '&ou_yr=' . urlencode($item->ou_yr);
  }
  $isbn = isset($item->ou_isbn)? ('&ou_isbn=' . urlencode($item->ou_isbn)): '' ;
  $base = "<a class='patroninfo-export' target='_ris' href=" . base_path() . drupal_get_path('module', 'patroninfo') . '/ris.php?' . 'ou_aulast=' . urlencode($item->ou_aulast) . '&ou_genre=' . urlencode($genre) . '&ou_title=' . urlencode($item->ou_title) . $isbn . $pubs . $callnos . '>Export as citation format.</a>';
  //$base .= "<span class='cite'>Cite</span><span class='cbox'>CBOX</span>";
  return $base;
}
// example:
//<span
//   class="Z3988"
//   title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rfr_id=info%3Asid%2Focoins.info%3Agenerator&amp;rft.genre=book&amp;rft.btitle=Backup+and+recovery&amp;rft.title=Backup+and+recovery&amp;rft.aulast=Preston.&amp;rft.aufirst=W&amp;rft.auinit=Curtis&amp;rft.au=W+Curtis+Preston.">
//      (Insert Default Text Here)
//</span>

function __build_coins(&$item) {
  return "";
  if ($item->system != 'illiad') {
    $genre = 'book';
  }
  else {
    $genre = $item->ou_genre;
  }
  $pubs = "";
  if (isset($item->ou_pp)) {
    $pubs = '&amp;rft.pub=' . urlencode($item->ou_pb) . '&amp;rft.place=' . urlencode($item->ou_pp) . '&amp;rft.date=' . urlencode($item->ou_yr);
  }
  $base = "
<span class='Z3988' title='" . 'ctx_ver=' . urlencode('Z39.88-2004') . '&amp;rfr_id=' . urlencode('info:sid/ocoins.info:generator') . '&amp;rft_val_fmt=' . urlencode('info:ofi/fmt:kev:mtx:book') . '&amp;rft.au=' . urlencode($item->ou_aulast) . '&amp;rft.genre=' . urlencode($genre) . '&amp;rft.title=' . urlencode($item->ou_title) . '&amp;rft.isbn=' . urlencode($item->ou_isbn) . $pubs . "'" . '></span>
';
  return $base;
}
function __build_refbox() {
  $ret = '
  <div id="patroninfo-export-box">
        <div class="tbox">
            <div class="bleft">Cite/Export
                <span id="xxxrname"></span>
            </div>
            <div class="bright">
                <input type="image" src="close-16x16.png" id="togglecb" value="X"/>
            </div>
        </div>
	<hr/>
	<br/>
        <div class="mbox">
           <div class="bleft">Title:<span id="rname"></span>...</div>
        </div>
	<hr/>
	<br/>
        <div class="mbox">
            <a class="linea" id="dest" href="">Save to refworks</a>
            <br/>
            <hr/>
            <a class="linea" id="dest2" href="">Save as RIS</a>
            <br/>
            <hr/>
            <a class="linea" id="dest3" href="">Save as Bibtex</a>
            <br/>
            <hr/>
        </div>
    </div>
    <div id="dialog" title="my title">First try at the box.
    </div>
    ';
  return $ret;
}

module_load_include('inc', 'patroninfo', 'vxws');

function __pa_renewal_denied_api($patronid) {

  $block = '';
  $dbid = _vxwsdbid();
  $restbase = _vxws();
  $restapi = "$restbase/vxws/patron/$patronid/patronStatus/blocks?patron_homedb=$dbid";
  $patroni = file_get_contents($restapi);
  $xml = simplexml_load_string($patroni);
  $result = $xml->xpath("/response/blocks/institution/borrowingBlock/blockReason");
  while (list(, $node) = each($result)) {
    $block .= $node . "\n";
  }
  return $block;
}

# replace - with non breaking hyphen, so dates do not wrap in table.
function __pa_fmt_date($date) {
  $pattern = '/(\w+)-(\d+)-(\d+)/i';
  $replacement = '${1}&#8209;${2}&#8209;${3}';
  $string = preg_replace($pattern, $replacement, $date);
  return $string;
}
 
function __pa_fmt_tl($item) {
  $xtitle = isset($item->tl) ? $item->tl : '' ;
  $xcallno = isset($item->callno) ? $item->callno : '' ;
  $xau = isset($item->au) ? $item->au : '' ;
  $ititle = "<span class='pa-item-title'><i>" . $xtitle ."</i></span>" ;
  $iau = "<span class='pa-item-au'>" . $xau ."</span>" ;
  $icallno = "<span class='pa-item-callno'><b>" . $xcallno ."</b></span>" ;
  return "$iau $ititle $icallno ";
}
